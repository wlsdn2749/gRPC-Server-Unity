syntax = "proto3";

package routeguide;

// Interface exported by the Server
service RouteGuide{
	// 기본 RPC
	//
	// 특정 Point에 Feature가 있으면 그 Feature 반환, 없으면 Empty 반환
	//
	// stub을 통해 client가 server에게 요청을 보내고, 응답이 반환될 떄까지 기다린다. -> 일반 함수처럼

	rpc GetFeature(Point) returns (Feature) {}


	// A server-to-client 스트리밍 RPC.
	//
	// 사각형 안에있는 모든 가능한 Features를 획득, 결과는 한번에 반환되기 보다 Streamed? 된다. 
	// 예를들어 repated field로 응답 메시지가 간다?
	//
	// 클라에서 요청 보내면 스트리밍한다. 반환될 메시지들의 스트림을 얻게되고,
	// 클라이언트는 메시지가 없을 때 까지 stream을 읽게된다.
	// response type 앞에 stream 키워드를 지정함으로써 server-side streaming을 특정할 수 있다.
	rpc ListFeatures(Rectangle) returns (stream Feature) {}

	// A client-to-server 스트리밍 RPC.
	//
	// 순회되는 route들의 Point stream을 받고, 그 순회정리를 반환한다.
	// 
	// 클라이언트쪽 스트리밍이다. 클라이언트는 메시지들을 서버에게 보내면
	// 서버가 그것을 모두 읽고 처리해 반환할 때까지 기다린다.
	// 마찬가지로 여기에서도 sequence 앞에 stream을 지정함으로써, client-side streaming을 특정할 수 있다.
	rpc RecordRoute(stream Point) returns (RouteSummary) {}

	// A Bidirectional streaming RPC.
    //
	// route가 순회되는 동안 RouteNoets들의 여러 stream을 받는다,
    // 
	// 양방향 스트리밍 RPC로 양쪽에서 read-write stream으로 여러 메시지를 보낸다.
	// 두 streams는 독립적으로 실행되므로 클라이언트와 서버는 멋대로 읽을 수 있다.
	// 서버가 응답을 보내기전에 모든 클라이언트의 메세지를 기다릴 수 있고
	// 대신에 읽고 -> 쓰기, 또는 다른 조합으로 읽기 쓰기가 가능하다.
	// 각 스트림의 메세지 순서는 보장된다.
	// 요청과 응답 모든쪽에 stream을 써서 both-side streaming을 특정 할 수 있다.
    rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}

// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
message Point {
  int32 latitude = 1;
  int32 longitude = 2;
}

// A latitude-longitude rectangle, represented as two diagonally opposite
// points "lo" and "hi".
message Rectangle {
  // One corner of the rectangle.
  Point lo = 1;

  // The other corner of the rectangle.
  Point hi = 2;
}

// A feature names something at a given point.
//
// If a feature could not be named, the name is empty.
message Feature {
  // The name of the feature.
  string name = 1;

  // The point where the feature is detected.
  Point location = 2;
}

// A RouteNote is a message sent while at a given point.
message RouteNote {
  // The location from which the message is sent.
  Point location = 1;

  // The message to be sent.
  string message = 2;
}

// A RouteSummary is received in response to a RecordRoute rpc.
//
// It contains the number of individual points received, the number of
// detected features, and the total distance covered as the cumulative sum of
// the distance between each point.
message RouteSummary {
  // The number of points received.
  int32 point_count = 1;

  // The number of known features passed while traversing the route.
  int32 feature_count = 2;

  // The distance covered in metres.
  int32 distance = 3;

  // The duration of the traversal in seconds.
  int32 elapsed_time = 4;
}